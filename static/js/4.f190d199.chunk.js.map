{"version":3,"sources":["components/Inventory/List/List.module.scss","components/Common/CustomForm/CustomField.module.scss","components/Inventory/Heirachy/Hierachy.module.scss","components/Inventory/Heirachy/Indicator/Indicator.module.scss","components/Inventory/Inventory.module.scss","components/Inventory/Heirachy/Indicator/Indicator.tsx","components/Inventory/Heirachy/Hierarchy.tsx","components/Inventory/Heirachy/HeirachyContainer.tsx","components/Common/CustomForm/CustomButton.tsx","components/Common/CustomForm/CustomField.tsx","components/Inventory/List/Create/Create.tsx","components/Inventory/List/Room/Room.tsx","components/Inventory/List/Edit/Edit.tsx","components/Inventory/List/List.tsx","components/Inventory/List/ListContainer.tsx","components/Inventory/Inventory.tsx"],"names":["module","exports","Indicator","memo","indicator","length","EmptyIndicator","className","s","emptyIndicator","NonEmptyIndicator","nonEmptyIndicator","Hierarchy","handleClick","hierarchy","useSelector","databaseSelectors","getHierarchy","inventory","getInventory","hierachyPage","map","node","currInv","putAllSetsOfKeysWithData","extractKeysFromDependencies","id","key","name","building","currentInventory","onClick","title","Nodes","parts","nodes","subtitle","Rooms","items","ForTheThirdNesting","forTheThirdNesting","HeirachyContainer","dispatch","useDispatch","actions","setCurrentNode","setCurrentNameNode","setLevelNode","level","setCurrentInvenory","CustomButton","text","isSubmitting","type","props","CustomField","label","Component","Input","useField","field","meta","errorText","error","touched","classnames","withLabel","fieldLabel","hasError","componentProps","fieldErrors","Create","setCreate","getCurrentNode","listPage","validateOnChange","initialValues","count","validationSchema","enableReinitialize","onSubmit","values","a","setSubmitting","resetForm","createInventory","form","titleForObj","placeholder","autoComplete","input","btn","Room","create","edit","setEdit","forbuttons","prevState","Edit","handleDelete","disabled","yup","min","max","required","typeError","List","currenName","currenNode","dependency","notFound","itemsNotFound","keys","updateInventory","placeId","ListContainer","getCurrentInventory","getCurrentName","useState","useEffect","removeInventory","Inventory","getLoader","inventoryPage","heirachy","nodeData"],"mappings":"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","file":"static/js/4.f190d199.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"notFound\":\"List_notFound__fGGHo\",\"itemsNotFound\":\"List_itemsNotFound__5IvTZ\",\"title\":\"List_title__HSqD1\",\"forbuttons\":\"List_forbuttons__35zoq\",\"btn\":\"List_btn__2E9wl\",\"listPage\":\"List_listPage__3EDD6\",\"form\":\"List_form__1HaCN\",\"titleForObj\":\"List_titleForObj__1_Fq5\",\"input\":\"List_input__1ZH61\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldErrors\":\"CustomField_fieldErrors__7T4fE\",\"hasError\":\"CustomField_hasError__1qiWI\",\"filePicker\":\"CustomField_filePicker__1rlz7\",\"imageHolder\":\"CustomField_imageHolder__1mvKG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indicator\":\"Hierachy_indicator__1OXoo\",\"hierachyPage\":\"Hierachy_hierachyPage__1_cMO\",\"building\":\"Hierachy_building__3Owku\",\"title\":\"Hierachy_title__ukCft\",\"nodes\":\"Hierachy_nodes__cAMXR\",\"subtitle\":\"Hierachy_subtitle__17NjO\",\"items\":\"Hierachy_items__2k93k\",\"forTheThirdNesting\":\"Hierachy_forTheThirdNesting__osJr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emptyIndicator\":\"Indicator_emptyIndicator__1r2OD\",\"nonEmptyIndicator\":\"Indicator_nonEmptyIndicator__WAm_G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inventoryPage\":\"Inventory_inventoryPage__Imfpu\",\"heirachy\":\"Inventory_heirachy__2vPXJ\",\"nodeData\":\"Inventory_nodeData__17SF-\"};","import React, { memo } from \"react\"\r\nimport { IInventory } from \"../../../../interface/database\"\r\nimport s from \"./Indicator.module.scss\"\r\n\r\ninterface IProps {\r\n  indicator: Array<IInventory>\r\n}\r\n\r\nexport const Indicator = memo<IProps>(({ indicator }) => {\r\n  if (indicator.length) return <NonEmptyIndicator />\r\n\r\n  return <EmptyIndicator />\r\n})\r\n\r\nconst EmptyIndicator = () => <div className={s.emptyIndicator}></div>\r\n\r\nconst NonEmptyIndicator = () => <div className={s.nonEmptyIndicator}></div>\r\n","import React, { memo } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport s from \"./Hierachy.module.scss\"\r\nimport { databaseSelectors } from \"../../../redux/selectors/selectors\"\r\nimport {\r\n  extractKeysFromDependencies,\r\n  putAllSetsOfKeysWithData,\r\n} from \"../../../utils/funcHelpers\"\r\nimport { IHierarchy, IInventory } from \"../../../interface/database\"\r\nimport { Indicator } from \"./Indicator/Indicator\"\r\n\r\n\r\ninterface IProps {\r\n  handleClick: (id: string, name: string) => void\r\n}\r\n\r\nexport const Hierarchy = memo<IProps>(({ handleClick }) => {\r\n  const hierarchy = useSelector(databaseSelectors.getHierarchy)\r\n  const inventory = useSelector(databaseSelectors.getInventory)\r\n\r\n  if (!hierarchy && !inventory) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <ul className={s.hierachyPage}>\r\n      {hierarchy.map((node: IHierarchy) => {\r\n        const currInv = putAllSetsOfKeysWithData(\r\n          extractKeysFromDependencies(node.id, hierarchy),\r\n          inventory\r\n        )\r\n        return (\r\n          <div key={node.name}>\r\n            <li className={s.building}>\r\n              <div className={s.indicator}>\r\n                <Indicator indicator={currInv.currentInventory} />\r\n                <p\r\n                  onClick={() => handleClick(node.id, node.name)}\r\n                  className={s.title}\r\n                >\r\n                  {node.name}\r\n                </p>\r\n              </div>\r\n              <Nodes\r\n                handleClick={handleClick}\r\n                parts={node.parts}\r\n                hierarchy={hierarchy}\r\n                inventory={inventory}\r\n              />\r\n            </li>\r\n          </div>\r\n        )\r\n      })}\r\n    </ul>\r\n  )\r\n})\r\n\r\ninterface ISubsidiariesProps {\r\n  parts: Array<IHierarchy>\r\n  handleClick: (id: string, name: string) => void\r\n  hierarchy: Array<IHierarchy>\r\n  inventory: Array<IInventory>\r\n}\r\n\r\nconst Nodes = memo<ISubsidiariesProps>(\r\n  ({ parts, handleClick, hierarchy, inventory }) => {\r\n    return (\r\n      <>\r\n        {parts.map((node: IHierarchy) => {\r\n          const currInv = putAllSetsOfKeysWithData(\r\n            extractKeysFromDependencies(node.id, hierarchy),\r\n            inventory\r\n          )\r\n          return (\r\n            <div key={node.name}>\r\n              <ul key={node.name} className={s.nodes}>\r\n                <div className={s.indicator}>\r\n                  <Indicator indicator={currInv.currentInventory} />\r\n                  <p\r\n                    onClick={() => handleClick(node.id, node.name)}\r\n                    className={s.subtitle}\r\n                  >\r\n                    {node.name}\r\n                  </p>\r\n                </div>\r\n                {node.parts && (\r\n                  <Rooms\r\n                    handleClick={handleClick}\r\n                    parts={node.parts}\r\n                    hierarchy={hierarchy}\r\n                    inventory={inventory}\r\n                  />\r\n                )}\r\n              </ul>\r\n            </div>\r\n          )\r\n        })}\r\n      </>\r\n    )\r\n  }\r\n)\r\n\r\nconst Rooms = memo<ISubsidiariesProps>(\r\n  ({ parts, handleClick, hierarchy, inventory }) => {\r\n    return (\r\n      <>\r\n        {parts.map((node: IHierarchy) => {\r\n          const currInv = putAllSetsOfKeysWithData(\r\n            extractKeysFromDependencies(node.id, hierarchy),\r\n            inventory\r\n          )\r\n          return (\r\n            <li key={node.name} className={s.items}>\r\n              <div className={s.indicator}>\r\n                <Indicator indicator={currInv.currentInventory} />\r\n                <p onClick={() => handleClick(node.id, node.name)}>\r\n                  {node.name}\r\n                </p>\r\n              </div>\r\n              <ForTheThirdNesting\r\n                handleClick={handleClick}\r\n                parts={node.parts}\r\n                hierarchy={hierarchy}\r\n                inventory={inventory}\r\n              />\r\n            </li>\r\n          )\r\n        })}\r\n      </>\r\n    )\r\n  }\r\n)\r\n\r\n// Additionally, if there are floors\r\nconst ForTheThirdNesting = memo<ISubsidiariesProps>(\r\n  ({ parts, handleClick, hierarchy, inventory }) => {\r\n    return (\r\n      <>\r\n        {parts?.map((node: IHierarchy) => {\r\n          const currInv = putAllSetsOfKeysWithData(\r\n            extractKeysFromDependencies(node.id, hierarchy),\r\n            inventory\r\n          )\r\n          return (\r\n            <li key={node.name} className={s.forTheThirdNesting}>\r\n              <div className={s.indicator}>\r\n                <Indicator indicator={currInv.currentInventory} />\r\n                <p onClick={() => handleClick(node.id, node.name)}>\r\n                  {node.name}\r\n                </p>\r\n              </div>\r\n            </li>\r\n          )\r\n        })}\r\n      </>\r\n    )\r\n  }\r\n)\r\n","import React, { memo } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { actions } from \"../../../redux/database-reducer\"\r\nimport { databaseSelectors } from \"../../../redux/selectors/selectors\"\r\nimport { Hierarchy } from \"./Hierarchy\"\r\nimport {\r\n  extractKeysFromDependencies,\r\n  putAllSetsOfKeysWithData,\r\n} from \"../../../utils/funcHelpers\"\r\n\r\nexport const HeirachyContainer = memo(() => {\r\n  const dispatch = useDispatch()\r\n  const hierarchy = useSelector(databaseSelectors.getHierarchy)\r\n  const inventory = useSelector(databaseSelectors.getInventory)\r\n\r\n  const handleClick = (id: string, name: string) => {\r\n    dispatch(actions.setCurrentNode(id))\r\n    dispatch(actions.setCurrentNameNode(name))\r\n    const node = putAllSetsOfKeysWithData(\r\n      extractKeysFromDependencies(id, hierarchy),\r\n      inventory\r\n    )\r\n    dispatch(actions.setLevelNode(node.level))\r\n    dispatch(actions.setCurrentInvenory(node.currentInventory))\r\n  }\r\n\r\n  return <Hierarchy handleClick={handleClick} />\r\n})\r\n","import React, { FC } from \"react\"\nimport \"./CustomField.module.scss\"\n\ninterface ICustomButtom {\n  text: string\n  isSubmitting: boolean\n  className?: string\n  type?: \"button\" | \"submit\" | \"reset\" | undefined\n}\n\nexport const CustomButton: FC<ICustomButtom> = ({\n  text,\n  isSubmitting,\n  className,\n  type,\n  ...props\n}) => {\n  return (\n    <button className={className} type={type} {...props}>\n      {isSubmitting ? \"loading\" : text}\n    </button>\n  )\n}\n","import React, { FC } from \"react\"\nimport { FieldAttributes, useField } from \"formik\"\nimport classnames from \"classnames\"\nimport s from \"./CustomField.module.scss\"\n\ninterface IClassName {\n  className?: string\n}\ninterface CustomFieldProps extends IClassName {\n  name: string\n  label?: string\n  type?: string\n  placeholder?: string\n  disabled?: boolean\n  style?: any\n  handleChange?: any\n  Component?: any\n  componentProps?: any\n}\n\nexport const CustomField: React.FC<FieldAttributes<CustomFieldProps>> = ({\n  label,\n  Component = Input,\n  className,\n  ...props\n}) => {\n  const [field, meta] = useField<CustomFieldProps>(props)\n  let errorText = meta.error && meta.touched ? meta.error : \"\"\n\n  return (\n    <div\n      className={classnames(\"\", {\n        [s.error]: errorText,\n        [s.withLabel]: label,\n      })}\n    >\n      <label className={s.fieldLabel}>{label}</label>\n      <Component\n        field={field}\n        className={classnames(className, {\n          [s.hasError]: meta.error && meta.touched,\n        })}\n        {...field}\n        {...props}\n        {...props.componentProps}\n      />\n      <p className={classnames(s.fieldErrors)}>{errorText}</p>\n    </div>\n  )\n}\n\nexport const Input: FC = ({ ...props }) => {\n  return <input {...props} />\n}\n\nexport const Textarea = ({ ...props }) => {\n  return <textarea {...props} />\n}\n\nexport const Radiobutton: FC = ({ ...props }) => {\n  return <input type=\"radio\" {...props} />\n}\n\nexport const Select: FC = ({ ...props }) => {\n  return <select {...props} />\n}\n\nexport const Checkbox: FC = ({ ...props }) => {\n  return <input type=\"checkbox\" {...props} />\n}\n","import { Form, Formik } from \"formik\"\r\nimport React, { memo } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { databaseSelectors } from \"../../../../redux/selectors/selectors\"\r\nimport { CustomButton } from \"../../../Common/CustomForm/CustomButton\"\r\nimport { CustomField } from \"../../../Common/CustomForm/CustomField\"\r\nimport { validationSchema } from \"../List\"\r\nimport { createInventory } from \"../../../../redux/database-reducer\"\r\nimport s from \"../List.module.scss\"\r\n\r\ninterface IProps {\r\n  setCreate: (state: boolean) => void\r\n}\r\n\r\nexport const Create = memo<IProps>(({ setCreate }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  // name current node (click)\r\n  const id = useSelector(databaseSelectors.getCurrentNode)\r\n\r\n  return (\r\n    <>\r\n      <div className={s.listPage}>\r\n        <Formik\r\n          validateOnChange={true}\r\n          initialValues={{\r\n            name: \"\",\r\n            count: \"\",\r\n          }}\r\n          validationSchema={validationSchema}\r\n          enableReinitialize={true}\r\n          onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n            setSubmitting(false)\r\n            dispatch(createInventory(values.name, +values.count, id))\r\n            setCreate(false)\r\n            resetForm()\r\n          }}\r\n        >\r\n          {({ isSubmitting }) => {\r\n            return (\r\n              <Form>\r\n                <div className={s.form}>\r\n                  <h3 className={s.titleForObj}>Название оборудования</h3>\r\n                  <CustomField\r\n                    name=\"name\"\r\n                    placeholder=\"Оборудование\"\r\n                    autoComplete=\"off\"\r\n                    className={s.input}\r\n                  />\r\n\r\n                  <h3 className={s.titleForObj}>Количество</h3>\r\n                  <CustomField\r\n                    name=\"count\"\r\n                    placeholder=\"Количество\"\r\n                    autoComplete=\"off\"\r\n                    className={s.input}\r\n                  />\r\n\r\n                  <CustomButton\r\n                    type=\"submit\"\r\n                    className={s.btn}\r\n                    text={\"Добавить\"}\r\n                    isSubmitting={isSubmitting}\r\n                  ></CustomButton>\r\n                </div>\r\n              </Form>\r\n            )\r\n          }}\r\n        </Formik>\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n","import React, { memo } from \"react\"\r\nimport { IInventory } from \"../../../../interface/database\"\r\nimport { IDependency } from \"../../../../utils/funcHelpers\"\r\nimport { Create } from \"../Create/Create\"\r\nimport s from \"../List.module.scss\"\r\n\r\ninterface IProps {\r\n  dependency: IDependency\r\n  setCreate: (value: React.SetStateAction<boolean>) => void\r\n  create: boolean\r\n  currentInventory: Array<IInventory>\r\n  edit: boolean\r\n  setEdit: (value: React.SetStateAction<boolean>) => void\r\n}\r\n\r\nexport const Room = memo<IProps>(\r\n  ({ currentInventory, setCreate, create, edit, setEdit }) => {\r\n    //\r\n    if (currentInventory.length === 0) {\r\n      return (\r\n        <>\r\n          <div className={s.forbuttons}>\r\n            <button\r\n              onClick={() => setCreate((prevState: boolean) => !prevState)}\r\n              className={s.btn}\r\n            >\r\n              Создать\r\n            </button>\r\n            {create && <Create setCreate={setCreate} />}\r\n          </div>\r\n        </>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className={s.forbuttons}>\r\n          <button\r\n            onClick={() => setCreate((prevState: boolean) => !prevState)}\r\n            className={s.btn}\r\n          >\r\n            Создать\r\n          </button>\r\n          {create && <Create setCreate={setCreate} />}\r\n          <button\r\n            onClick={() => setEdit((prevState) => !prevState)}\r\n            className={s.btn}\r\n          >\r\n            {edit ? \"Выйти из режима редактировния\" : \"Режим редактирования\"}\r\n          </button>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n)\r\n","import React, { memo } from \"react\"\r\nimport { CustomButton } from \"../../../Common/CustomForm/CustomButton\"\r\nimport { CustomField } from \"../../../Common/CustomForm/CustomField\"\r\nimport s from \"../List.module.scss\"\r\n\r\ninterface IProps {\r\n  isSubmitting: boolean\r\n  id: string\r\n  handleDelete: (id: string) => void\r\n  edit: boolean\r\n}\r\n\r\nexport const Edit = memo<IProps>(({ isSubmitting, handleDelete, id, edit }) => {\r\n  if (!edit) {\r\n    return (\r\n      <>\r\n        <CustomField\r\n          disabled\r\n          name=\"name\"\r\n          placeholder=\"Имя\"\r\n          className={s.input}\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n        <h3 className={s.titleForObj}>Количество</h3>\r\n\r\n        <CustomField\r\n          disabled\r\n          name=\"count\"\r\n          placeholder=\"Количество\"\r\n          className={s.input}\r\n          autoComplete=\"off\"\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <CustomField\r\n        name=\"name\"\r\n        placeholder=\"Имя\"\r\n        className={s.input}\r\n        autoComplete=\"off\"\r\n      />\r\n\r\n      <h3 className={s.titleForObj}>Количество</h3>\r\n\r\n      <CustomField\r\n        name=\"count\"\r\n        placeholder=\"Количество\"\r\n        className={s.input}\r\n        autoComplete=\"off\"\r\n      />\r\n\r\n      <div className={s.forbuttons}>\r\n        <CustomButton\r\n          type=\"submit\"\r\n          className={s.btn}\r\n          text={\"Изменить\"}\r\n          isSubmitting={isSubmitting}\r\n        ></CustomButton>\r\n\r\n        <button className={s.btn} onClick={() => handleDelete(id)}>\r\n          Удалить\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n","import React, { memo } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { Formik, Form } from \"formik\"\r\nimport * as yup from \"yup\"\r\nimport { CustomField } from \"../../Common/CustomForm/CustomField\"\r\nimport { IInventory } from \"../../../interface/database\"\r\nimport s from \"./List.module.scss\"\r\nimport { updateInventory } from \"../../../redux/database-reducer\"\r\nimport { IDependency } from \"../../../utils/funcHelpers\"\r\nimport { Room } from \"./Room/Room\"\r\nimport { Edit } from \"./Edit/Edit\"\r\n\r\nexport interface IInitialValues {\r\n  name: string\r\n  count: string\r\n}\r\n\r\nexport const validationSchema = yup.object({\r\n  name: yup\r\n    .string()\r\n    .min(3, \"Минимум 3 буквы\")\r\n    .max(30, \"Максимум 30 букв\")\r\n    .required(\"Введите предмет\"),\r\n  count: yup\r\n    .number()\r\n    .typeError(\"Только цифры\")\r\n    .required(\"Введите название задачи\"),\r\n})\r\n\r\ninterface IProps {\r\n  currenName: string\r\n  currenNode: string\r\n  dependency: IDependency\r\n  create: boolean\r\n  setCreate: (value: React.SetStateAction<boolean>) => void\r\n  edit: boolean\r\n  setEdit: (value: React.SetStateAction<boolean>) => void\r\n  currentInventory: Array<IInventory>\r\n  handleDelete: (id: string) => void\r\n  handleUpdate?: (id: string) => void\r\n}\r\n\r\nexport const List = memo<IProps>(\r\n  ({\r\n    currenName,\r\n    currenNode,\r\n    dependency,\r\n    create,\r\n    setCreate,\r\n    edit,\r\n    setEdit,\r\n    currentInventory,\r\n    handleDelete,\r\n  }) => {\r\n    const dispatch = useDispatch()\r\n    return (\r\n      <>\r\n        <h2 className={s.title}>{currenName}</h2>\r\n\r\n        {currentInventory.length === 0 && (\r\n          <div className={s.notFound}>\r\n            <p className={s.itemsNotFound}>\r\n              В выбранном помещении нет оборудования\r\n            </p>\r\n          </div>\r\n        )}\r\n\r\n        {dependency.keys[0].length === 1 ? (\r\n          <Room\r\n            dependency={dependency}\r\n            currentInventory={currentInventory}\r\n            setCreate={setCreate}\r\n            create={create}\r\n            edit={edit}\r\n            setEdit={setEdit}\r\n          />\r\n        ) : null}\r\n\r\n        {currentInventory.map((inventory: IInventory) => (\r\n          <div className={s.listPage} key={inventory.id}>\r\n            <Formik\r\n              validateOnChange={true}\r\n              initialValues={{\r\n                name: inventory.name,\r\n                count: inventory.count,\r\n              }}\r\n              validationSchema={validationSchema}\r\n              enableReinitialize={true}\r\n              onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n                setSubmitting(false)\r\n\r\n                resetForm()\r\n\r\n                dispatch(\r\n                  updateInventory({\r\n                    id: inventory.id,\r\n                    count: values.count,\r\n                    name: values.name,\r\n                    placeId: currenNode,\r\n                  })\r\n                )\r\n              }}\r\n            >\r\n              {({ isSubmitting }) => {\r\n                return (\r\n                  <Form>\r\n                    <div className={s.form}>\r\n                      <h3 className={s.titleForObj}>Название оборудования</h3>\r\n\r\n                      <Edit\r\n                        isSubmitting={isSubmitting}\r\n                        handleDelete={handleDelete}\r\n                        id={inventory.id}\r\n                        edit={edit}\r\n                      />\r\n                    </div>\r\n                  </Form>\r\n                )\r\n              }}\r\n            </Formik>\r\n          </div>\r\n        ))}\r\n      </>\r\n    )\r\n  }\r\n)\r\n","import React, { memo, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { databaseSelectors } from \"../../../redux/selectors/selectors\"\r\nimport s from \"./List.module.scss\"\r\nimport {\r\n// updateInventory,\r\n  removeInventory,\r\n} from \"../../../redux/database-reducer\"\r\nimport { extractKeysFromDependencies } from \"../../../utils/funcHelpers\"\r\nimport { List } from \"./List\"\r\n\r\nexport const ListContainer = memo(() => {\r\n  const dispatch = useDispatch()\r\n  const currentInventory = useSelector(databaseSelectors.getCurrentInventory)\r\n  const currenNode = useSelector(databaseSelectors.getCurrentNode)\r\n  const currenName = useSelector(databaseSelectors.getCurrentName)\r\n  const hierarchy = useSelector(databaseSelectors.getHierarchy)\r\n  const dependency = extractKeysFromDependencies(currenNode, hierarchy)\r\n\r\n  const [edit, setEdit] = useState(false)\r\n  const [create, setCreate] = useState(false)\r\n\r\n  useEffect(() => {}, [dependency])\r\n\r\n  const handleDelete = (id: string) => {\r\n    dispatch(removeInventory(id))\r\n    setEdit(false)\r\n  }\r\n\r\n  // const handleUpdate = (id: string) => {\r\n  //   dispatch(updateInventory)\r\n  //   setEdit(false)\r\n  // }\r\n\r\n  if (!currentInventory.length && !currenNode) {\r\n    return <div className={s.notFound}>Необходимо сделать выбор</div>\r\n  }\r\n\r\n  return (\r\n    <List\r\n      currenNode={currenNode}\r\n      currenName={currenName}\r\n      dependency={dependency}\r\n      create={create}\r\n      setCreate={setCreate}\r\n      edit={edit}\r\n      setEdit={setEdit}\r\n      currentInventory={currentInventory}\r\n      handleDelete={handleDelete}\r\n      // handleUpdate={handleUpdate}\r\n    />\r\n  )\r\n})\r\n","import React, { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nimport { getHierarchy, getInventory } from \"../../redux/database-reducer\"\r\nimport { databaseSelectors } from \"../../redux/selectors/selectors\"\r\nimport { HeirachyContainer } from \"./Heirachy/HeirachyContainer\"\r\nimport s from \"./Inventory.module.scss\"\r\nimport { ListContainer } from \"./List/ListContainer\"\r\n\r\nconst Inventory = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const loading = useSelector(databaseSelectors.getLoader)\r\n\r\n  useEffect(() => {\r\n    dispatch(getHierarchy())\r\n    dispatch(getInventory())\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className={s.inventoryPage}>\r\n      <div className={s.heirachy}>\r\n        <HeirachyContainer />\r\n      </div>\r\n      <div className={s.nodeData}>\r\n        <ListContainer />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Inventory\r\n"],"sourceRoot":""}
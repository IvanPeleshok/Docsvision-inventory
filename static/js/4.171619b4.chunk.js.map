{"version":3,"sources":["components/Inventory/List/List.module.scss","components/Common/CustomForm/CustomField.module.scss","components/Inventory/Heirachy/Hierachy.module.scss","components/Inventory/Inventory.module.scss","components/Inventory/Heirachy/Hierarchy.tsx","components/Inventory/Heirachy/HeirachyContainer.tsx","components/Common/CustomForm/CustomField.tsx","components/Common/CustomForm/CustomButton.tsx","components/Inventory/List/Create/Create.tsx","components/Inventory/List/Room/Room.tsx","components/Inventory/List/Edit/Edit.tsx","components/Inventory/List/List.tsx","components/Inventory/List/ListContainer.tsx","components/Inventory/Inventory.tsx"],"names":["module","exports","Hierarchy","memo","handleClick","hierarchy","useSelector","databaseSelectors","getHierarchy","inventory","getInventory","className","s","hierachyPage","map","building","key","name","onClick","id","title","Nodes","parts","node","nodes","subtitle","Rooms","room","items","ForTheThirdNesting","forTheThirdNesting","HeirachyContainer","dispatch","useDispatch","actions","setCurrentNode","setCurrentNameNode","PutAllSetsOfKeysWithData","ExtractKeysFromDependencies","setLevelNode","level","setCurrentInvenory","currentInventory","CustomField","label","Component","Input","props","useField","field","meta","errorText","error","touched","classnames","withLabel","fieldLabel","hasError","componentProps","fieldErrors","CustomButton","text","isSubmitting","type","Create","setCreate","getCurrentNode","listPage","validateOnChange","initialValues","count","validationSchema","enableReinitialize","onSubmit","values","a","setSubmitting","resetForm","createInventory","form","titleForObj","placeholder","autoComplete","input","btn","Room","create","edit","setEdit","length","notFound","itemsNotFound","forbuttons","prevState","Edit","handleDelete","yup","min","max","required","typeError","List","currenName","currenNode","dependency","keys","updateInventory","placeId","disabled","ListContainer","getCurrentInventory","getCurrentName","useState","useEffect","removeInventory","Inventory","inventoryPage","heirachy","nodeData"],"mappings":"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","file":"static/js/4.171619b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"notFound\":\"List_notFound__fGGHo\",\"itemsNotFound\":\"List_itemsNotFound__5IvTZ\",\"title\":\"List_title__HSqD1\",\"forbuttons\":\"List_forbuttons__35zoq\",\"btn\":\"List_btn__2E9wl\",\"listPage\":\"List_listPage__3EDD6\",\"form\":\"List_form__1HaCN\",\"titleForObj\":\"List_titleForObj__1_Fq5\",\"input\":\"List_input__1ZH61\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldErrors\":\"CustomField_fieldErrors__7T4fE\",\"hasError\":\"CustomField_hasError__1qiWI\",\"filePicker\":\"CustomField_filePicker__1rlz7\",\"imageHolder\":\"CustomField_imageHolder__1mvKG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hierachyPage\":\"Hierachy_hierachyPage__1_cMO\",\"building\":\"Hierachy_building__3Owku\",\"title\":\"Hierachy_title__ukCft\",\"nodes\":\"Hierachy_nodes__cAMXR\",\"subtitle\":\"Hierachy_subtitle__17NjO\",\"items\":\"Hierachy_items__2k93k\",\"forTheThirdNesting\":\"Hierachy_forTheThirdNesting__osJr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inventoryPage\":\"Inventory_inventoryPage__Imfpu\",\"heirachy\":\"Inventory_heirachy__2vPXJ\",\"nodeData\":\"Inventory_nodeData__17SF-\"};","import React, { memo } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport s from \"./Hierachy.module.scss\"\r\nimport { databaseSelectors } from \"../../../redux/selectors/selectors\"\r\n\r\ninterface INode {\r\n  parts: any\r\n}\r\n\r\ninterface IProps {\r\n  handleClick: (id: string, name: string) => void\r\n}\r\n\r\nexport const Hierarchy = memo<IProps>(({ handleClick }) => {\r\n  const hierarchy = useSelector(databaseSelectors.getHierarchy)\r\n  const inventory = useSelector(databaseSelectors.getInventory)\r\n\r\n  if (!hierarchy && !inventory) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <ul className={s.hierachyPage}>\r\n      {hierarchy.map((building: any) => (\r\n        <div key={building.name}>\r\n          <li className={s.building}>\r\n            <p\r\n              onClick={() => handleClick(building.id, building.name)}\r\n              className={s.title}\r\n            >\r\n              {building.name}\r\n            </p>\r\n            <Nodes handleClick={handleClick} parts={building?.parts} />\r\n          </li>\r\n        </div>\r\n      ))}\r\n    </ul>\r\n  )\r\n})\r\n\r\ninterface ISubsidiariesProps {\r\n  parts?: Array<any>\r\n  handleClick: (id: string, name: string) => void\r\n}\r\n\r\nconst Nodes = memo<ISubsidiariesProps>(({ parts, handleClick }) => {\r\n  return (\r\n    <>\r\n      {parts?.map((node: any) => (\r\n        <div key={node.name}>\r\n          <ul key={node.name} className={s.nodes}>\r\n            <p\r\n              onClick={() => handleClick(node.id, node.name)}\r\n              className={s.subtitle}\r\n            >\r\n              {node.name}\r\n            </p>\r\n            {node.parts && (\r\n              <Rooms handleClick={handleClick} parts={node?.parts} />\r\n            )}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </>\r\n  )\r\n})\r\n\r\nconst Rooms = memo<ISubsidiariesProps>(({ parts, handleClick }) => {\r\n  return (\r\n    <>\r\n      {parts?.map((room: any) => (\r\n        <li key={room.name} className={s.items}>\r\n          <p onClick={() => handleClick(room.id, room.name)}>{room.name}</p>\r\n          <ForTheThirdNesting handleClick={handleClick} parts={room?.parts} />\r\n        </li>\r\n      ))}\r\n    </>\r\n  )\r\n})\r\n\r\n// Additionally, if there are floors\r\nconst ForTheThirdNesting = memo<ISubsidiariesProps>(\r\n  ({ parts, handleClick }) => {\r\n    return (\r\n      <>\r\n        {parts?.map((room: any) => (\r\n          <li key={room.name} className={s.forTheThirdNesting}>\r\n            <p onClick={() => handleClick(room.id, room.name)}>{room.name}</p>\r\n          </li>\r\n        ))}\r\n      </>\r\n    )\r\n  }\r\n)\r\n","import React, { memo } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { actions } from \"../../../redux/database-reducer\"\r\nimport { databaseSelectors } from \"../../../redux/selectors/selectors\"\r\nimport { Hierarchy } from \"./Hierarchy\"\r\nimport {\r\n  ExtractKeysFromDependencies,\r\n  PutAllSetsOfKeysWithData,\r\n} from \"../../../utils/funcHelpers\"\r\n\r\nexport const HeirachyContainer = memo(() => {\r\n  const dispatch = useDispatch()\r\n  const hierarchy = useSelector(databaseSelectors.getHierarchy)\r\n  const inventory = useSelector(databaseSelectors.getInventory)\r\n\r\n  const handleClick = (id: string, name: string) => {\r\n    dispatch(actions.setCurrentNode(id))\r\n    dispatch(actions.setCurrentNameNode(name))\r\n    const node = PutAllSetsOfKeysWithData(\r\n      ExtractKeysFromDependencies(id, hierarchy),\r\n      inventory\r\n    )\r\n    dispatch(actions.setLevelNode(node.level))\r\n    dispatch(actions.setCurrentInvenory(node.currentInventory))\r\n  }\r\n\r\n  return <Hierarchy handleClick={handleClick} />\r\n})\r\n","import React, { FC } from \"react\"\nimport { FieldAttributes, useField } from \"formik\"\nimport classnames from \"classnames\"\nimport s from \"./CustomField.module.scss\"\n\ninterface IClassName {\n  className?: string\n}\ninterface CustomFieldProps extends IClassName {\n  name: string\n  label?: string\n  type?: string\n  placeholder?: string\n  disabled?: boolean\n  style?: any\n  handleChange?: any\n  Component?: any\n  componentProps?: any\n}\n\nexport const CustomField: React.FC<FieldAttributes<CustomFieldProps>> = ({\n  label,\n  Component = Input,\n  className,\n  ...props\n}) => {\n  const [field, meta] = useField<CustomFieldProps>(props)\n  let errorText = meta.error && meta.touched ? meta.error : \"\"\n\n  return (\n    <div\n      className={classnames(\"\", {\n        [s.error]: errorText,\n        [s.withLabel]: label,\n      })}\n    >\n      <label className={s.fieldLabel}>{label}</label>\n      <Component\n        field={field}\n        className={classnames(className, {\n          [s.hasError]: meta.error && meta.touched,\n        })}\n        {...field}\n        {...props}\n        {...props.componentProps}\n      />\n      <p className={classnames(s.fieldErrors)}>{errorText}</p>\n    </div>\n  )\n}\n\nexport const Input: FC = ({ ...props }) => {\n  return <input {...props} />\n}\n\nexport const Textarea = ({ ...props }) => {\n  return <textarea {...props} />\n}\n\nexport const Radiobutton: FC = ({ ...props }) => {\n  return <input type=\"radio\" {...props} />\n}\n\nexport const Select: FC = ({ ...props }) => {\n  return <select {...props} />\n}\n\nexport const Checkbox: FC = ({ ...props }) => {\n  return <input type=\"checkbox\" {...props} />\n}\n","import React, { FC } from \"react\"\nimport \"./CustomField.module.scss\"\n\ninterface ICustomButtom {\n  text: string\n  isSubmitting: boolean\n  className?: string\n  type?: \"button\" | \"submit\" | \"reset\" | undefined\n}\n\nexport const CustomButton: FC<ICustomButtom> = ({\n  text,\n  isSubmitting,\n  className,\n  type,\n  ...props\n}) => {\n  return (\n    <button className={className} type={type} {...props}>\n      {isSubmitting ? \"loading\" : text}\n    </button>\n  )\n}\n","import { Form, Formik } from \"formik\"\r\nimport React, { memo } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { databaseSelectors } from \"../../../../redux/selectors/selectors\"\r\nimport { CustomButton } from \"../../../Common/CustomForm/CustomButton\"\r\nimport { CustomField } from \"../../../Common/CustomForm/CustomField\"\r\nimport { validationSchema } from \"../List\"\r\nimport { createInventory } from \"../../../../redux/database-reducer\"\r\nimport s from \"../List.module.scss\"\r\n\r\ninterface IProps {\r\n  setCreate: (state: boolean) => void\r\n}\r\n\r\nexport const Create = memo<IProps>(({ setCreate }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  // name current node (click)\r\n  const id = useSelector(databaseSelectors.getCurrentNode)\r\n\r\n  return (\r\n    <>\r\n      <div className={s.listPage}>\r\n        <Formik\r\n          validateOnChange={true}\r\n          initialValues={{\r\n            name: \"\",\r\n            count: \"\",\r\n          }}\r\n          validationSchema={validationSchema}\r\n          enableReinitialize={true}\r\n          onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n            setSubmitting(false)\r\n            dispatch(createInventory(values.name, +values.count, id))\r\n            setCreate(false)\r\n            resetForm()\r\n          }}\r\n        >\r\n          {({ isSubmitting }) => {\r\n            return (\r\n              <Form>\r\n                <div className={s.form}>\r\n                  <h3 className={s.titleForObj}>Название оборудования</h3>\r\n                  <CustomField\r\n                    name=\"name\"\r\n                    placeholder=\"Оборудование\"\r\n                    autoComplete=\"off\"\r\n                    className={s.input}\r\n                  />\r\n\r\n                  <h3 className={s.titleForObj}>Количество</h3>\r\n                  <CustomField\r\n                    name=\"count\"\r\n                    placeholder=\"Количество\"\r\n                    autoComplete=\"off\"\r\n                    className={s.input}\r\n                  />\r\n\r\n                  <CustomButton\r\n                    type=\"submit\"\r\n                    className={s.btn}\r\n                    text={\"Добавить\"}\r\n                    isSubmitting={isSubmitting}\r\n                  ></CustomButton>\r\n                </div>\r\n              </Form>\r\n            )\r\n          }}\r\n        </Formik>\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n","import React, { memo } from \"react\"\r\nimport { IInventory } from \"../../../../interface/database\"\r\nimport { IDependency } from \"../../../../utils/funcHelpers\"\r\nimport { Create } from \"../Create/Create\"\r\nimport s from \"../List.module.scss\"\r\n\r\ninterface IProps {\r\n  dependency: IDependency\r\n  setCreate: (value: React.SetStateAction<boolean>) => void\r\n  create: boolean\r\n  currentInventory: Array<IInventory>\r\n  edit: boolean\r\n  setEdit: (value: React.SetStateAction<boolean>) => void\r\n}\r\n\r\nexport const Room = memo<IProps>(\r\n  ({ currentInventory, setCreate, create, edit, setEdit }) => {\r\n    //\r\n    if (currentInventory.length === 0) {\r\n      return (\r\n        <>\r\n          <div className={s.notFound}>\r\n            <p className={s.itemsNotFound}>\r\n              В выбранном помещении нет оборудования\r\n            </p>\r\n          </div>\r\n          <div className={s.forbuttons}>\r\n            <button\r\n              onClick={() => setCreate((prevState: boolean) => !prevState)}\r\n              className={s.btn}\r\n            >\r\n              Создать\r\n            </button>\r\n            {create && <Create setCreate={setCreate} />}\r\n          </div>\r\n        </>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className={s.forbuttons}>\r\n          <button\r\n            onClick={() => setCreate((prevState: boolean) => !prevState)}\r\n            className={s.btn}\r\n          >\r\n            Создать\r\n          </button>\r\n          {create && <Create setCreate={setCreate} />}\r\n          <button\r\n            onClick={() => setEdit((prevState) => !prevState)}\r\n            className={s.btn}\r\n          >\r\n            {edit ? \"Выйти из режима редактировния\" : \"Режим редактирования\"}\r\n          </button>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n)\r\n","import React, { memo } from \"react\"\r\nimport { CustomButton } from \"../../../Common/CustomForm/CustomButton\"\r\nimport { CustomField } from \"../../../Common/CustomForm/CustomField\"\r\nimport s from \"../List.module.scss\"\r\n\r\ninterface IProps {\r\n  isSubmitting: boolean\r\n  id: string\r\n  handleDelete: (id: string) => void\r\n}\r\n\r\nexport const Edit = memo<IProps>(({ isSubmitting, handleDelete, id }) => {\r\n  return (\r\n    <div>\r\n      <CustomField\r\n        name=\"name\"\r\n        placeholder=\"Имя\"\r\n        className={s.input}\r\n        autoComplete=\"off\"\r\n      />\r\n\r\n      <h3 className={s.titleForObj}>Количество</h3>\r\n\r\n      <CustomField\r\n        name=\"count\"\r\n        placeholder=\"Количество\"\r\n        className={s.input}\r\n        autoComplete=\"off\"\r\n      />\r\n\r\n      <div className={s.forbuttons}>\r\n        <CustomButton\r\n          type=\"submit\"\r\n          className={s.btn}\r\n          text={\"Изменить\"}\r\n          isSubmitting={isSubmitting}\r\n        ></CustomButton>\r\n\r\n        <button className={s.btn} onClick={() => handleDelete(id)}>\r\n          Удалить\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n","import React, { memo } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { Formik, Form } from \"formik\"\r\nimport * as yup from \"yup\"\r\nimport { CustomField } from \"../../Common/CustomForm/CustomField\"\r\nimport { IInventory } from \"../../../interface/database\"\r\nimport s from \"./List.module.scss\"\r\nimport { updateInventory } from \"../../../redux/database-reducer\"\r\nimport { IDependency } from \"../../../utils/funcHelpers\"\r\nimport { Room } from \"./Room/Room\"\r\nimport { Edit } from \"./Edit/Edit\"\r\n\r\nexport interface IInitialValues {\r\n  name: string\r\n  count: string\r\n}\r\n\r\nexport const validationSchema = yup.object({\r\n  name: yup\r\n    .string()\r\n    .min(3, \"Минимум 3 буквы\")\r\n    .max(30, \"Максимум 30 букв\")\r\n    .required(\"Введите предмет\"),\r\n  count: yup\r\n    .number()\r\n    .typeError(\"Только цифры\")\r\n    .required(\"Введите название задачи\"),\r\n})\r\n\r\ninterface IProps {\r\n  currenName: string\r\n  currenNode: string\r\n  dependency: IDependency\r\n  create: boolean\r\n  setCreate: (value: React.SetStateAction<boolean>) => void\r\n  edit: boolean\r\n  setEdit: (value: React.SetStateAction<boolean>) => void\r\n  currentInventory: Array<IInventory>\r\n  handleDelete: (id: string) => void\r\n  handleUpdate?: (id: string) => void\r\n}\r\n\r\nexport const List = memo<IProps>(\r\n  ({\r\n    currenName,\r\n    currenNode,\r\n    dependency,\r\n    create,\r\n    setCreate,\r\n    edit,\r\n    setEdit,\r\n    currentInventory,\r\n    handleDelete,\r\n  }) => {\r\n    const dispatch = useDispatch()\r\n    return (\r\n      <>\r\n        <h2 className={s.title}>{currenName}</h2>\r\n\r\n        {dependency.keys[0].length === 1 ? (\r\n          <Room\r\n            dependency={dependency}\r\n            currentInventory={currentInventory}\r\n            setCreate={setCreate}\r\n            create={create}\r\n            edit={edit}\r\n            setEdit={setEdit}\r\n          />\r\n        ) : null}\r\n\r\n        {currentInventory.map((inventory: IInventory) => (\r\n          <div className={s.listPage} key={inventory.id}>\r\n            <Formik\r\n              validateOnChange={true}\r\n              initialValues={{\r\n                name: inventory.name,\r\n                count: inventory.count,\r\n              }}\r\n              validationSchema={validationSchema}\r\n              enableReinitialize={true}\r\n              onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n                setSubmitting(false)\r\n\r\n                resetForm()\r\n\r\n                dispatch(\r\n                  updateInventory({\r\n                    id: inventory.id,\r\n                    count: values.count,\r\n                    name: values.name,\r\n                    placeId: currenNode,\r\n                  })\r\n                )\r\n              }}\r\n            >\r\n              {({ isSubmitting }) => {\r\n                return (\r\n                  <Form>\r\n                    <div className={s.form}>\r\n                      <h3 className={s.titleForObj}>Название оборудования</h3>\r\n\r\n                      {edit ? (\r\n                        <Edit\r\n                          isSubmitting={isSubmitting}\r\n                          handleDelete={handleDelete}\r\n                          id={inventory.id}\r\n                        />\r\n                      ) : (\r\n                        <>\r\n                          <CustomField\r\n                            disabled\r\n                            name=\"name\"\r\n                            placeholder=\"Имя\"\r\n                            className={s.input}\r\n                            autoComplete=\"off\"\r\n                          />\r\n\r\n                          <h3 className={s.titleForObj}>Количество</h3>\r\n\r\n                          <CustomField\r\n                            disabled\r\n                            name=\"count\"\r\n                            placeholder=\"Количество\"\r\n                            className={s.input}\r\n                            autoComplete=\"off\"\r\n                          />\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  </Form>\r\n                )\r\n              }}\r\n            </Formik>\r\n          </div>\r\n        ))}\r\n      </>\r\n    )\r\n  }\r\n)\r\n","import React, { memo, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { databaseSelectors } from \"../../../redux/selectors/selectors\"\r\nimport s from \"./List.module.scss\"\r\nimport {\r\n// updateInventory,\r\n  removeInventory,\r\n} from \"../../../redux/database-reducer\"\r\nimport { ExtractKeysFromDependencies } from \"../../../utils/funcHelpers\"\r\nimport { List } from \"./List\"\r\n\r\nexport const ListContainer = memo(() => {\r\n  const dispatch = useDispatch()\r\n  const currentInventory = useSelector(databaseSelectors.getCurrentInventory)\r\n  const currenNode = useSelector(databaseSelectors.getCurrentNode)\r\n  const currenName = useSelector(databaseSelectors.getCurrentName)\r\n  const hierarchy = useSelector(databaseSelectors.getHierarchy)\r\n  const dependency = ExtractKeysFromDependencies(currenNode, hierarchy)\r\n\r\n  const [edit, setEdit] = useState(false)\r\n  const [create, setCreate] = useState(false)\r\n\r\n  useEffect(() => {}, [dependency])\r\n\r\n  const handleDelete = (id: string) => {\r\n    dispatch(removeInventory(id))\r\n    setEdit(false)\r\n  }\r\n\r\n  // const handleUpdate = (id: string) => {\r\n  //   dispatch(updateInventory)\r\n  //   setEdit(false)\r\n  // }\r\n\r\n  if (!currentInventory.length && !currenNode) {\r\n    return <div className={s.notFound}>Необходимо сделать выбор</div>\r\n  }\r\n\r\n  return (\r\n    <List\r\n      currenNode={currenNode}\r\n      currenName={currenName}\r\n      dependency={dependency}\r\n      create={create}\r\n      setCreate={setCreate}\r\n      edit={edit}\r\n      setEdit={setEdit}\r\n      currentInventory={currentInventory}\r\n      handleDelete={handleDelete}\r\n      // handleUpdate={handleUpdate}\r\n    />\r\n  )\r\n})\r\n","import React from \"react\"\r\nimport { HeirachyContainer } from \"./Heirachy/HeirachyContainer\"\r\nimport s from \"./Inventory.module.scss\"\r\nimport { ListContainer } from \"./List/ListContainer\"\r\n\r\nconst Inventory = () => {\r\n  return (\r\n    <div className={s.inventoryPage}>\r\n      <div className={s.heirachy}>\r\n        <HeirachyContainer />\r\n      </div>\r\n      <div className={s.nodeData}>\r\n        <ListContainer />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Inventory\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/Common/Loader/Loader.module.scss","redux/selectors/selectors.ts","components/Common/Loader/Loader.tsx","App.tsx","hoc/withSuspense.tsx","serviceWorker.ts","redux/redux-store.ts","index.tsx","utils/funcHelpers.ts","firebase/firebase.ts","types/types.ts","utils/showAlert.ts","api/api-database.ts","redux/database-reducer.ts"],"names":["module","exports","databaseSelectors","getHierarchy","state","database","hierarchy","getInventory","inventory","getCurrentInventory","currentInventory","getCurrentNode","currenNode","getCurrentName","currenName","getCurrentLevel","currenLevel","getLoader","loading","Loader","className","s","loader","progress","indeterminate","Inventory","React","lazy","App","memo","WrappedComponent","history","useHistory","dispatch","useDispatch","useSelector","useLayoutEffect","push","useEffect","path","render","props","Suspense","fallback","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","rootReducer","combineReducers","databaseReducer","devTools","applyMiddleware","thunkMiddleware","store","createStore","ReactDOM","basename","process","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","NestingLevel","PutAllSetsOfKeysWithData","dependency","map","keys","key","placeId","level","ExtractKeysFromDependencies","id","nestingLevel","above","keysForInventory","building","parts","node","room","flat","item","nonEmptyArr","Object","length","forEach","ParseNodes","places","part","find","place","ParseTheAnswerToTheHierarchyLastNode","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AlertifyStatusEnum","alertify","set","showAlert","text","databaseAPI","firestore","collection","docs","x","data","name","count","filestore","doc","delete","initialState","action","type","payload","actions","setHierarchy","setInventory","setCurrentNode","setCurrentNameNode","setCurrentInvenory","setLoadingTrue","setLoadingFalse","setLevelNode","levelNode","a","undefined","hierarchyWithNodes","objNode","_updateListCurrentInvetory","getState","createInventory","success","updateInventory","removeInventory"],"mappings":"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","file":"static/js/main.8c66755e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__3ByGs\",\"progress\":\"Loader_progress__1Ftb1\",\"indeterminate\":\"Loader_indeterminate__19Jpf\",\"indeterminate-short\":\"Loader_indeterminate-short__rIWjb\"};","import { TAppState } from \"../../types/redux\"\n\nexport const databaseSelectors = {\n  getHierarchy: (state: TAppState) => state.database.hierarchy,\n  getInventory: (state: TAppState) => state.database.inventory,\n  getCurrentInventory: (state: TAppState) => state.database.currentInventory,\n  getCurrentNode: (state: TAppState) => state.database.currenNode,\n  getCurrentName: (state: TAppState) => state.database.currenName,\n  getCurrentLevel: (state: TAppState) => state.database.currenLevel,\n  getLoader: (state: TAppState) => state.database.loading,\n}\n","import React, { FC } from \"react\"\nimport s from \"./Loader.module.scss\"\n\nexport const Loader: FC = () => {\n  return (\n    <div className={s.loader}>\n      <div className={s.progress}>\n        <div className={s.indeterminate} />\n      </div>\n    </div>\n  )\n}\n","import React, { memo, useEffect, useLayoutEffect } from \"react\"\nimport { Redirect, Route, Switch, useHistory } from \"react-router\"\nimport \"./App.scss\"\nimport { withSuspense } from \"./hoc/withSuspense\"\nimport { getInventory, getHierarchy } from \"./redux/database-reducer\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { Loader } from \"./components/Common/Loader/Loader\"\nimport { databaseSelectors } from \"./redux/selectors/selectors\"\n\nconst Inventory = React.lazy(() => import(\"./components/Inventory/Inventory\"))\n\nconst App = memo(() => {\n  const history = useHistory()\n\n  const dispatch = useDispatch()\n  const loader = useSelector(databaseSelectors.getLoader)\n\n  useLayoutEffect(() => {\n    history.push(\"/database\")\n  }, [])\n\n  useEffect(() => {\n    dispatch(getHierarchy())\n    dispatch(getInventory())\n  }, [])\n\n  return (\n    <>\n      {loader && <Loader />}\n      <div className=\"app-content\">\n        <Switch>\n          <Route path=\"/database\" render={withSuspense(Inventory)} />\n          <Route path=\"*\" render={() => <Redirect to=\"/database\" />} />\n        </Switch>\n      </div>\n    </>\n  )\n})\n\nexport default App\n","import React from \"react\"\n\nexport function withSuspense<T>(WrappedComponent: React.ComponentType<T>) {\n  return (props: T) => {\n    return (\n      <React.Suspense fallback={\"\"}>\n        <WrappedComponent {...props} />\n      </React.Suspense>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { composeWithDevTools } from \"redux-devtools-extension\"\nimport { createStore, combineReducers, applyMiddleware } from \"redux\"\nimport thunkMiddleware from \"redux-thunk\"\nimport { databaseReducer } from \"./database-reducer\"\n\nexport let rootReducer = combineReducers({\n  database: databaseReducer,\n})\n\nconst devTools =\n  process.env.NODE_ENV === \"production\"\n    ? applyMiddleware(thunkMiddleware)\n    : composeWithDevTools(applyMiddleware(thunkMiddleware))\n\nconst store = createStore(rootReducer, devTools)\nexport default store\n","import \"react-app-polyfill/ie11\"\nimport \"react-app-polyfill/stable\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { Provider } from \"react-redux\"\nimport store from \"./redux/redux-store\"\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n)\n\nserviceWorker.register()\n","import { IHierarchy, IInventory, IPlace } from \"../interface/database\"\r\nexport enum NestingLevel {\r\n  room = \"room\",\r\n  above = \"above\",\r\n}\r\n\r\nexport interface IDependency {\r\n  keys: Array<Array<string>>\r\n  level: NestingLevel\r\n}\r\n\r\nexport const PutAllSetsOfKeysWithData = (\r\n  dependency: IDependency,\r\n  inventory: Array<IInventory>\r\n) => {\r\n  let currentInventory: Array<IInventory> = []\r\n  inventory.map((inventory: IInventory) => {\r\n    dependency.keys[0].map((key: string) => {\r\n      if (key === inventory.placeId) {\r\n        currentInventory.push(inventory)\r\n      }\r\n    })\r\n  })\r\n  return { currentInventory, level: dependency.level }\r\n}\r\n\r\nexport const ExtractKeysFromDependencies = (\r\n  id: string,\r\n  hierarchy: Array<IHierarchy>\r\n) => {\r\n  console.log(hierarchy)\r\n  let nestingLevel = NestingLevel.above\r\n  let keysForInventory: any = []\r\n  // Get all dependency id if building was clicked\r\n  // Zero nesting\r\n  hierarchy.map((building: IHierarchy) => {\r\n    if (building.id === id) {\r\n      const parts = building.parts?.map((node: any) => {\r\n        const nodes = node.parts?.map((room: any) => room.id)\r\n        return nodes\r\n      })\r\n      keysForInventory.push(\r\n        [\r\n          parts?.flat(),\r\n          ...building.parts!.map((item: any) => item.id),\r\n          building.id,\r\n        ].flat()\r\n      )\r\n    }\r\n  })\r\n\r\n  // First nesting\r\n  let nonEmptyArr: number = Object.keys(keysForInventory).length\r\n  if (!nonEmptyArr) {\r\n    hierarchy.forEach((node: IHierarchy) => {\r\n      node.parts?.forEach((node: any) => {\r\n        if (node.id === id) {\r\n          const parts = node.parts?.map((node: IHierarchy) => {\r\n            const nodes = node.parts?.map((room: any) => room.id)\r\n            return nodes\r\n          })\r\n          keysForInventory.push(\r\n            [\r\n              parts?.flat(),\r\n              ...(node.parts?.map((item: IHierarchy) => item.id) ?? []),\r\n              node.id,\r\n            ].flat()\r\n          )\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  // Second nesting\r\n  nonEmptyArr = Object.keys(keysForInventory).length\r\n  // Get all dependency ids if a node is clicked\r\n  nonEmptyArr = Object.keys(keysForInventory).length\r\n  if (!nonEmptyArr) {\r\n    hierarchy.forEach((node: IHierarchy) => {\r\n      node.parts?.forEach((node: any) => {\r\n        node.parts?.forEach((node: IHierarchy) => {\r\n          if (node.id === id) {\r\n            const parts = node.parts?.map((node: any) => {\r\n              const nodes = node.parts?.map((room: any) => room.id)\r\n              return nodes\r\n            })\r\n            keysForInventory.push(\r\n              [\r\n                parts?.flat(),\r\n                ...(node.parts?.map((item: any) => item.id) ?? []),\r\n                node.id,\r\n              ].flat()\r\n            )\r\n          }\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  // Third nesting\r\n  nonEmptyArr = Object.keys(keysForInventory).length\r\n  // Get all dependency ids if a room is clicked\r\n  if (!nonEmptyArr) {\r\n    keysForInventory.push([id])\r\n    nestingLevel = NestingLevel.room\r\n  }\r\n\r\n  return { keys: keysForInventory, level: nestingLevel }\r\n}\r\n\r\nexport const ParseNodes = (places: Array<IPlace>, part: string): any => {\r\n  return places.find((place: IPlace) => place.id === part)\r\n}\r\n\r\nexport const ParseTheAnswerToTheHierarchyLastNode = (\r\n  node: any,\r\n  places: Array<IPlace>\r\n) => {\r\n  const objNode = node?.parts?.map((part: string) => {\r\n    const room = places.find((place: IPlace) => place.id === part)\r\n    return room\r\n  })\r\n  return objNode\r\n}\r\n","import firebase from \"firebase\"\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyD6DnGbVfdJlDJ_pEOUfDfTDJrA8j3lIs8\",\r\n  authDomain: \"dv-inventory.firebaseapp.com\",\r\n  databaseURL: \"https://dv-inventory.firebaseio.com\",\r\n  projectId: \"dv-inventory\",\r\n  storageBucket: \"dv-inventory.appspot.com\",\r\n  messagingSenderId: \"130062240176\",\r\n  appId: \"1:130062240176:web:ecbca5d29b37d25c6cee75\",\r\n}\r\n\r\nfirebase.initializeApp(config)\r\n\r\nexport default firebase\r\n","export enum AlertifyStatusEnum {\n\tsuccess = 'success',\n\twarn = 'warn',\n\terror = 'error'\n}","import alertify from \"alertifyjs\";\nimport { AlertifyStatusEnum } from '../types/types';\nalertify.set('notifier', 'position', 'bottom-right');\n\nexport const showAlert = (status: AlertifyStatusEnum, text: string) => {\t\n\talertify[status](text)\n}\n","import firebase from \"../firebase/firebase\"\r\nimport { IInventory } from \"../interface/database\"\r\nimport { AlertifyStatusEnum } from \"../types/types\"\r\nimport { showAlert } from \"../utils/showAlert\"\r\n\r\nexport const databaseAPI = {\r\n  getPlaces() {\r\n    return firebase\r\n      .firestore()\r\n      .collection(\"places\")\r\n      .get()\r\n      .then((response: any) => {\r\n        return response.docs.map((x: any) => ({\r\n          id: x.id,\r\n          data: x.data(),\r\n          parts: x.data().parts && x.data().parts.map((part: any) => part.id),\r\n        }))\r\n      })\r\n      .catch(() =>\r\n        showAlert(AlertifyStatusEnum.error, \"Не удалось получить список мест\")\r\n      )\r\n  },\r\n  getInventory() {\r\n    return firebase\r\n      .firestore()\r\n      .collection(\"inventory\")\r\n      .get()\r\n      .then((response: any) => {\r\n        return response.docs.map((x: any) => ({\r\n          id: x.id,\r\n          data: x.data(),\r\n          placeId: x.data().place\r\n            ? x.data().place?.id\r\n            : \"Accidentally created in the database x.data().place === undefined\", // my bad\r\n        }))\r\n      })\r\n      .catch(() =>\r\n        showAlert(\r\n          AlertifyStatusEnum.error,\r\n          \"Не удалось получить список оборудования\"\r\n        )\r\n      )\r\n  },\r\n  createInventory(name: string, count: number, id: string) {\r\n    let filestore = firebase.firestore()\r\n    return filestore\r\n      .collection(\"inventory\")\r\n      .doc()\r\n      .set({\r\n        name: name,\r\n        count: count,\r\n        place: filestore.collection(\"place\").doc(id),\r\n      })\r\n      .then(() => {})\r\n      .catch(() => showAlert(AlertifyStatusEnum.error, \"Не удалось добавить\"))\r\n  },\r\n  deleteInventory(id: string) {\r\n    return firebase\r\n      .firestore()\r\n      .collection(\"inventory\")\r\n      .doc(id)\r\n      .delete()\r\n      .then(() => {})\r\n      .catch(() => showAlert(AlertifyStatusEnum.error, \"Не удалось удалить\"))\r\n  },\r\n\r\n  // The object is overwritten and returned by empty fields\r\n  // Therefore, I will delete and create a new one with changed fields\r\n  updateInventory(inventory: IInventory) {\r\n    let filestore = firebase.firestore()\r\n    return filestore\r\n      .collection(\"inventory\")\r\n      .doc(inventory.id)\r\n      .set({\r\n        count: inventory.count,\r\n        name: inventory.name,\r\n        placeId: inventory.placeId,\r\n      })\r\n      .then(() => {})\r\n      .catch(() => showAlert(AlertifyStatusEnum.error, \"Не удалось обновить\"))\r\n  },\r\n}\r\n","import { databaseAPI } from \"../api/api-database\"\r\nimport {\r\n  IPlace,\r\n  IInventory,\r\n  IPlaceResponse,\r\n  IInventoryResponse,\r\n  IHierarchy,\r\n} from \"../interface/database\"\r\nimport { TInferActions, TBaseThunk } from \"../types/redux\"\r\nimport { AlertifyStatusEnum } from \"../types/types\"\r\nimport {\r\n  ExtractKeysFromDependencies,\r\n  NestingLevel,\r\n  ParseNodes,\r\n  ParseTheAnswerToTheHierarchyLastNode,\r\n  PutAllSetsOfKeysWithData,\r\n} from \"../utils/funcHelpers\"\r\nimport { showAlert } from \"../utils/showAlert\"\r\n\r\nexport type TInitialState = typeof initialState\r\ntype TActions = TInferActions<typeof actions>\r\ntype TThunk = TBaseThunk<TActions>\r\n\r\nlet initialState = {\r\n  hierarchy: [] as Array<any>,\r\n  inventory: [] as Array<IInventory>,\r\n  currentInventory: [] as Array<IInventory>,\r\n  currenNode: \"\",\r\n  currenName: \"\",\r\n  currenLevel: NestingLevel.above,\r\n  loading: false,\r\n}\r\n\r\nexport const databaseReducer = (\r\n  state = initialState,\r\n  action: TActions\r\n): TInitialState => {\r\n  switch (action.type) {\r\n    case \"DATABASE/SET_HEIRARCHY\":\r\n      return {\r\n        ...state,\r\n        hierarchy: action.payload,\r\n      }\r\n    case \"DATABASE/SET_INVENTORY\":\r\n      return {\r\n        ...state,\r\n        inventory: action.payload,\r\n      }\r\n    case \"DATABASE/SET_CURRENT_NODE\":\r\n      return {\r\n        ...state,\r\n        currenNode: action.payload,\r\n      }\r\n    case \"DATABASE/SET_CURRENT_MANE_NODE\":\r\n      return {\r\n        ...state,\r\n        currenName: action.payload,\r\n      }\r\n    case \"DATABASE/SET_CURRENT_INVENORY\":\r\n      return {\r\n        ...state,\r\n        currentInventory: action.payload,\r\n      }\r\n    case \"DATABASE/SET_LOADING_TRUE\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      }\r\n    case \"DATABASE/SET_LOADING_FALSE\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      }\r\n    case \"DATABASE/SET_LEVEL_NODE\":\r\n      return {\r\n        ...state,\r\n        currenLevel: action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  setHierarchy: (hierarchy: Array<any>) =>\r\n    ({\r\n      type: \"DATABASE/SET_HEIRARCHY\",\r\n      payload: hierarchy,\r\n    } as const),\r\n  setInventory: (inventory: Array<IInventory>) =>\r\n    ({\r\n      type: \"DATABASE/SET_INVENTORY\",\r\n      payload: inventory,\r\n    } as const),\r\n  setCurrentNode: (node: string) =>\r\n    ({\r\n      type: \"DATABASE/SET_CURRENT_NODE\",\r\n      payload: node,\r\n    } as const),\r\n  setCurrentNameNode: (name: string) =>\r\n    ({\r\n      type: \"DATABASE/SET_CURRENT_MANE_NODE\",\r\n      payload: name,\r\n    } as const),\r\n  setCurrentInvenory: (currentInventory: Array<IInventory>) =>\r\n    ({\r\n      type: \"DATABASE/SET_CURRENT_INVENORY\",\r\n      payload: currentInventory,\r\n    } as const),\r\n  setLoadingTrue: () => ({ type: \"DATABASE/SET_LOADING_TRUE\" } as const),\r\n  setLoadingFalse: () => ({ type: \"DATABASE/SET_LOADING_FALSE\" } as const),\r\n  setLevelNode: (levelNode: NestingLevel) =>\r\n    ({ type: \"DATABASE/SET_LEVEL_NODE\", payload: levelNode } as const),\r\n}\r\n\r\nexport const getHierarchy = (): TThunk => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.setLoadingTrue())\r\n\r\n    const response = await databaseAPI.getPlaces()\r\n\r\n    const places = response.map((place: IPlaceResponse) => ({\r\n      name: place.data.name,\r\n      id: place.id,\r\n      parts: place.parts === undefined ? [] : place.parts,\r\n    }))\r\n\r\n    let hierarchy: Array<any> = []\r\n    // Building search\r\n    places.forEach((place: IPlace) => {\r\n      if (place.id.indexOf(\"-\") === -1) {\r\n        hierarchy.push({ id: place.id, parts: place.parts, name: place.name })\r\n      }\r\n    })\r\n    // Search for dependencies on parts\r\n    // Nesting level => 5\r\n    const hierarchyWithNodes = hierarchy.map((node: IHierarchy) => {\r\n      const objNode = node?.parts?.map((part: string) => {\r\n        const node = ParseNodes(places, part)\r\n        const objNode = node?.parts?.map((part: string) => {\r\n          const node = ParseNodes(places, part)\r\n          const objNode = node?.parts?.map((part: string) => {\r\n            const node = ParseNodes(places, part)\r\n            const objNode = node?.parts?.map((part: string) => {\r\n              const node = ParseNodes(places, part)\r\n              const objNode = node?.parts?.map((part: string) => {\r\n                const node = ParseNodes(places, part)\r\n                const objNode = ParseTheAnswerToTheHierarchyLastNode(\r\n                  node,\r\n                  places\r\n                )\r\n                return { name: node.name, id: node.id, parts: objNode }\r\n              })\r\n              return { name: node.name, id: node.id, parts: objNode }\r\n            })\r\n            return { name: node.name, id: node.id, parts: objNode }\r\n          })\r\n          return { name: node.name, id: node.id, parts: objNode }\r\n        })\r\n        return { name: node.name, id: node.id, parts: objNode }\r\n      })\r\n      return { name: node.name, id: node.id, parts: objNode }\r\n    })\r\n\r\n    dispatch(actions.setHierarchy(hierarchyWithNodes))\r\n\r\n    dispatch(actions.setLoadingFalse())\r\n  } catch (error) {}\r\n}\r\n\r\nexport const getInventory = (): TThunk => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.setLoadingTrue())\r\n\r\n    const response = await databaseAPI.getInventory()\r\n\r\n    const inventory = response?.map((inventory: IInventoryResponse) => ({\r\n      name: inventory.data.name,\r\n      count: +inventory.data.count,\r\n      id: inventory.id,\r\n      placeId: inventory.placeId,\r\n    }))\r\n\r\n    dispatch(actions.setInventory(inventory))\r\n\r\n    dispatch(actions.setLoadingFalse())\r\n  } catch (error) {}\r\n}\r\n\r\nconst _updateListCurrentInvetory = (): TThunk => async (dispatch, getState) => {\r\n  await dispatch(getInventory())\r\n\r\n  const node = await PutAllSetsOfKeysWithData(\r\n    ExtractKeysFromDependencies(\r\n      getState().database.currenNode,\r\n      getState().database.hierarchy\r\n    ),\r\n    getState().database.inventory\r\n  )\r\n  dispatch(actions.setLevelNode(node.level))\r\n  dispatch(actions.setCurrentInvenory(node.currentInventory))\r\n}\r\n\r\nexport const createInventory = (\r\n  name: string,\r\n  count: number,\r\n  id: string\r\n): TThunk => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.setLoadingTrue())\r\n\r\n    await databaseAPI.createInventory(name, count, id)\r\n\r\n    dispatch(_updateListCurrentInvetory())\r\n\r\n    dispatch(actions.setLoadingFalse())\r\n\r\n    showAlert(AlertifyStatusEnum.success, \"Оборудование добавлено\")\r\n  } catch (error) {}\r\n}\r\n\r\nexport const updateInventory = (inventory: IInventory): TThunk => async (\r\n  dispatch\r\n) => {\r\n  try {\r\n    dispatch(actions.setLoadingTrue())\r\n\r\n    // await databaseAPI.updateInventory\r\n    // Why I don't use it is written in api-database\r\n\r\n    await databaseAPI.deleteInventory(inventory.id)\r\n    await databaseAPI.createInventory(\r\n      inventory.name,\r\n      inventory.count,\r\n      inventory.placeId\r\n    )\r\n\r\n    dispatch(_updateListCurrentInvetory())\r\n\r\n    dispatch(actions.setLoadingFalse())\r\n\r\n    showAlert(AlertifyStatusEnum.success, \"Оборудование обновлено\")\r\n  } catch (error) {}\r\n}\r\n\r\nexport const removeInventory = (id: string): TThunk => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.setLoadingTrue())\r\n\r\n    await databaseAPI.deleteInventory(id)\r\n\r\n    dispatch(_updateListCurrentInvetory())\r\n\r\n    dispatch(actions.setLoadingFalse())\r\n\r\n    showAlert(AlertifyStatusEnum.success, \"Оборудование удалено\")\r\n  } catch (error) {}\r\n}\r\n"],"sourceRoot":""}